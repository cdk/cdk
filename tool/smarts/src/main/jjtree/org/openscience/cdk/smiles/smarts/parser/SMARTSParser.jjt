options {
	STATIC=false;
	FORCE_LA_CHECK=false;
	USER_CHAR_STREAM=false;
    UNICODE_INPUT=false;
    IGNORE_CASE=false;
    MULTI=true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
}

PARSER_BEGIN(SMARTSParser)

/* Copyright (C) 2004-2007  The Chemistry Development Kit (CDK) project
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 * (or see http://www.gnu.org/copyleft/lesser.html)
 */
package org.openscience.cdk.smiles.smarts.parser;

import java.io.StringReader;
import org.openscience.cdk.isomorphism.matchers.QueryAtomContainer;
import org.openscience.cdk.interfaces.IChemObjectBuilder;

/**
 * This parser implements a nearly complete subset of the SMARTS syntax as defined on
 * <a href="http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html">the
 * Daylight website</a>. 
 *
 * <p>Example code using SMARTS substructure search looks like:
 * <pre>
 * SmilesParser sp = new SmilesParser();
 * AtomContainer atomContainer = sp.parseSmiles("CC(=O)OC(=O)C");
 * QueryAtomContainer query = SMARTSParser.parse("C*C");
 * boolean queryMatch = UniversalIsomorphismTester.isSubgraph(atomContainer, query);
 * </pre>
 *
 * <p>See the cdk.test.smiles.smarts.parser.ParserTest for examples of the implemented
 * subset.
 *
 * This parser is based on JJTree and it generates an AST (Abstract Syntax Tree)
 * <p>To get the AST, the code looks like:
 * <pre>
 * SMARTSParser parser = new SMARTSParser(new java.io.StringReader("C*C"));
 * ASTStart = parser.start();
 * </pre>
 *
 * @see org.openscience.cdk.isomorphism.matchers.smarts.SMARTSAtom
 *
 * @author      Dazhi Jiao
 * @cdk.created 2007-04-23
 * @cdk.githash
 *
 * @cdk.require ant1.6
 * @cdk.module  smarts
 *
 * @cdk.keyword SMARTS
 * @cdk.keyword substructure search
 */
public class SMARTSParser {

    private int componentId = 0;

	/**
	 * This method parses a Smarts String and returns an instance of 
	 * <code>QueryAtomContainer</code>
	 */
	public static QueryAtomContainer parse(String smarts, IChemObjectBuilder builder) {
        QueryAtomContainer container = null;
        StringReader reader = new StringReader(smarts);
        try {
            SMARTSParser parser = new SMARTSParser(reader);
            ASTStart start = parser.Start();
            org.openscience.cdk.smiles.smarts.parser.SmartsQueryVisitor visitor 
            	= new org.openscience.cdk.smiles.smarts.parser.SmartsQueryVisitor(builder);
            container = (QueryAtomContainer)start.jjtAccept(visitor, null);
        } catch (ParseException exception) {
            throw new IllegalArgumentException("The string " + smarts + " is not a valid" +
              " SMARTS string: " + exception.getMessage(), exception);
        }
        return container;	
	} 

}

PARSER_END(SMARTSParser)

TOKEN_MGR_DECLS : {

    // Required by SetState
    void backup(int n) { input_stream.backup(n); } 

}

<*> TOKEN:
{
    <WS: ( " " | "\t" | "\n" | "\r" ) >
    |
    // Logical Operators
    <L_AND : ";" >
    |
    <H_AND : "&" >
    |
    <OR    : "," >
    |
    <NOT   : "!" >
    |
    // Bond
    <   S_BOND : "-" >  // single bond 
    |
    <UP_S_BOND : "/" >  // directional single bond "up"
    |
    <DN_S_BOND : "\\" > // directional sinble bond "down"
    |
    <UP_OR_UNSPECIFIED_S_BOND : "/?" > 
    |
    <DN_OR_UNSPECIFIED_S_BOND : "\\?" >
    |
    <   D_BOND : "=" >  // double bond
    |
    <   T_BOND : "#" >  // triple bond
    |
    <   AR_BOND : ":" >  // aromatic bond
    |
    < ANY_BOND : "~" >  // any bond
    |
    <   R_BOND : "@" >  // any ring bond
    |
    // Explicit Elements
        <  c: "c" >
    |   <  n: "n" >
    |   <  o: "o" >
    |   <  s: "s" >
    |   <  p: "p" >
    |   < as: "as" >
    |   < se: "se" >
    |   <  B: "B" >
    |   <  C: "C" >
    |   <  N: "N" >
    |   <  O: "O" >
    |   <  F: "F" >
    |   <  P: "P" >
    |   <  S: "S" >
    |	< CL: "Cl" >   
    |   < BR: "Br" >
    |   <  I: "I" >
    |   < WILDCARD: "*" >
    |   <a : "a" >
    |   <A : "A" >
    |   <CARET : "^">
    |   <Q_MARK : "?" >
    |
    <DIGIT: ["0"-"9"] > 
    |
    <L_BRACKET : "[" > 
    |
    <L_PAREN : "(" > 
    |
    <R_PAREN : ")" > 
    |
    <R_BRACKET : "]" > 
    |
    <DOLLAR : "$" > 
    |
    <PLUS: "+" >
}

<ATOM_EXPRESSION> TOKEN: {
    <h : "h" >
    |
    <D : "D" >
    |
    <R : "R" >
    |
    <r : "r" >
    |
    <v : "v" >
    |
    <X : "X" >
    |
    <x : "x" >
    |
    <G : "G" >
    |
    <HX : "#X" >
    |
    // ELEMENTS 
    <  H: "H" >
    |   < HE: "He" >
    |   < LI: "Li" >
    |   < BE: "Be" >
    |   < NE: "Ne" >
    |   < NA: "Na" >
    |   < MG: "Mg" >
    |	< AL: "Al" >
    |	< SI: "Si" >
    |	< AR: "Ar" >
    |   <  K: "K" >
    |   < CA: "Ca" >
    |   < TI: "Ti" >
    |   <  V: "V" >
    |   < CR: "Cr" >
    |   < MN: "Mn" >
    |   < FE: "Fe" >
    |   < CO: "Co" >
    |   < NI: "Ni" >
    |   < CU: "Cu" >
    |   < ZN: "Zn" >
    |   < GA: "Ga" >
    |   < GE: "Ge" >
    |   < AS: "As" >
    |   < SE: "Se" >
    |   < KR: "Kr" >
    |   < RB: "Rb" >
    |   < SR: "Sr" >
    |   <  Y: "Y" >
    |   < ZR: "Zr" >
    |   < NB: "Nb" >
    |   < MO: "Mo" >
    |   < TC: "Tc" >
    |   < RU: "Ru" >
    |   < RH: "Rh" >
    |   < PD: "Pd" >
    |   < AG: "Ag" >
    |   < CD: "Cd" >
    |   < IN: "In" >
    |   < SN: "Sn" >
    |   < SB: "Sb" >
    |   < TE: "Te" >
    |   < XE: "Xe" >
    |   < CS: "Cs" >
    |   < BA: "Ba" >
    |   < LA: "La" >
    |   < HF: "Hf" >
    |   < TA: "Ta" >
    |   <  W: "W" >
    |   < RE: "Re" >
    |   < OS: "Os" >
    |   < IR: "Ir" >
    |   < PT: "Pt" >
    |   < AU: "Au" >
    |   < HG: "Hg" >
    |   < TL: "Tl" >
    |   < PB: "Pb" >
    |   < BI: "Bi" >
    |   < PO: "Po" >
    |   < AT: "At" >
    |   < RN: "Rn" >
    |   < FR: "Fr" >
    |   < RA: "Ra" >
    |   < AC: "Ac" >
    |   < TH: "Th" >
    |   < PA: "Pa" >
    |   <  U: "U" >
    |   < PU: "Pu" >
    |   < AM: "Am" >
    |   < CM: "Cm" >
    |   < BK: "Bk" >
    |   < CF: "Cf" >
    |   < ES: "Es" >
    |   < FM: "Fm" >
    |   < MD: "Md" >
    |   < NO: "No" >
    |   < LR: "Lr" >
    |   <  NP: "Np" >
    |   <  CE: "Ce" >
    |   <  ND: "Nd" >
    |   <  PM: "Pm" >
    |   <  SM: "Sm" >
    |   <  EU: "Eu" >
    |   <  GD: "Gd" >
    |   <  TB: "Tb" >
    |   <  DY: "Dy" >
    |   <  HO: "Ho" >
    |   <  ER: "Er" >
    |   <  TM: "Tm" >
    |   <  YB: "Yb" >
    |   <  LU: "Lu" >
    |   <  PR: "Pr" >     
    |   <SC: "Sc"> 

}

/**
 *                     Start ::= <ReactionExpression> <#_WS>
 *        ReactionExpression ::= <GroupExpression> (">>" <GroupExpression>)? |
 *                               ">" <GroupExpression> ">" | ">>" <GroupExpression>
 *           GroupExpression ::= ["("] <SmartsExpresion> [")"] ( "." ["("] <SmartsExpression> [")"] )*
 *          SmartsExpression ::= <AtomExpression> ( 
 									( [ <LowAndBond> ] ( <Digit> | <AtomExpression> ) ) |
 									( "(" [ <LowAndBond> ] <SmartsExpression> ")" ) )*
 		      AtomExpression ::= ( "[" [ <AtomicMass> ] <LowAndExpression> "]" ) | <ExplicitAtomExpression>
 *                LowAndBond ::= <OrBond> [ ";" <AndBond> ]
 *                    OrBond ::= <ExplicitHighAndBond> [ "," <OrBond> ]
 *       ExplicitHighAndBond ::= <ImplicitHighAndBond> [ "&" <ExplicitHighAndBond> ]
 *       ImplicitHighAndBond ::= <NotBond> [ <ImplicitHighAndBond> ]
 *                   NotBond ::= [ "!" ] <SimpleBond>
 *                SimpleBond ::= "/" | "\\" | "/?" | "\\?" | "=" | "#" | "~" | "@"
 *    ExplicitAtomExpression ::= [ "B" | "C" | "N" | "O" | "P" | "S" | "F" | "CL" | "BR" | "I" 
 *                               | "c" | "o" | "n" | "*" | "A" | "a" | "p" | "as" | "se" ] 
 *          LowAndExpression ::= <OrExpression> ( ";" <LowAndExpression> )?
 *              OrExpression ::= <ExplicitHighAndExpression> ( "," <OrExpression> ) ?
 * ExplicitHighAndExpression ::= <ImplicitHighAndExpression> ( "&" <ExplicitHighAndExpression> )?
 * ImplicitHighAndExpression ::= <NotExpression> ( <ImplicitHighAndExpression> ) ?
 *             NotExpression ::= "!" ( <PrimitiveAtomExpression> | <RecursiveSmartsExpression> )
 * RecursiveSmartsExpression ::= "$" "(" <SmartsExpression> ")"
 *   PrimitiveAtomExpression ::= <NonHydrogenElement> | "*" | "A" | "a" | "D" (<Digits>)? | "H" (<Digits>)? | "h" (<Digits>)?
 *                               | "R" (<Digit>+)? | "r" (<Digit>+)? | "v" (<Digit>+)? | "#X" | "G" (<DIGIT>+)  
 *                               | "X" (<Digit>+)? | "x" (<Digit>+)? | "^" (<DIGIT>)
 *                               | ("+" | "-") (<Digit>+)? | "#" (<Digit>+) | "@" | "@@" | <Digit>+
 *                     Digit ::= ( "0" - "9")
 *        NonHydrogenElement ::= [ "HE" | "LI" | "BE" | "NE" | "NA" | "MG" | "AL" | "SI" | "AR" | "CA" | "SC" |
 *                               "TI" | "CR" | "MN" | "FE" | "CO" | "NI" | "CU" | "ZN" | "GA" | "GE" | "AS" |
 *                               "SE" | "BR" | "KR" | "RB" | "SR" | "ZR" | "NB" | "MO" | "TC" | "RU" | "RH" |
 *                               "PD" | "AG" | "CD" | "IN" | "SN" | "SB" | "TE" | "XE" | "CS" | "BA" | "LA" |
 *                               "HF" | "TA" | "RE" | "OS" | "IR" | "PT" | "AU" | "HG" | "TL" | "PB" | "BI" |
 *                               "PO" | "AT" | "RN" | "FR" | "RA" | "AC" | "TH" | "PA" |
 *                               "B" | "C" | "N" | "O" | "F" | "P" | "S" | "K" | "V" | "Y" | "I" | "U" |
 *                               "c" | "o" | "n" | "p" | "as" | "se" ]
 */

ASTStart Start() #Start : {}
{
    ReactionExpression() (<WS> | <EOF>)
    {
        return jjtThis;
    }
}

void ReactionExpression() #Reaction : {}
{
    GroupExpression() ( ">>" [GroupExpression()] )?
    |
    ">" GroupExpression() ">"
    |
    ">>" GroupExpression()
}

void GroupExpression() #Group : {}
{
    (
        <L_PAREN> 
        SmartsExpression()
        {
            ((ASTSmarts) jjtree.peekNode()).setComponentId(++componentId);
        }
        ( "." 
          SmartsExpression()
          {
              // same component grouping
              ((ASTSmarts) jjtree.peekNode()).setComponentId(componentId);
          }
          )* 
        <R_PAREN>
        |
        SmartsExpression()
    )
    ( "." 
    	(
    	    <L_PAREN> 
                    SmartsExpression()
                    {
                        ((ASTSmarts) jjtree.peekNode()).setComponentId(++componentId);
                    }
                    ( "." 
                      SmartsExpression()
                      {
                          // same component grouping
                          ((ASTSmarts) jjtree.peekNode()).setComponentId(componentId);
                      }
                      )* 
            <R_PAREN>
            |
            SmartsExpression()
        )
    )*
}    

void SmartsExpression() #Smarts : 
{
	ASTAtom atom;
	int ringIdToken;
}
{
	atom = AtomExpression() 
	(
	  (
	  	( LowAndBond() )? 
	  	( 
	  		(<DIGIT> 
	  		{ ringIdToken = token.image.charAt(0) - '0'; } 
	  		| ("%" <DIGIT> 
	  		{ ringIdToken = 10 * (token.image.charAt(0) - '0'); }
	  		       <DIGIT> 
	  		{ ringIdToken += token.image.charAt(0) - '0'; })) 
	  		{
	  			ASTLowAndBond bond = null;
				ASTRingIdentifier ringId = new ASTRingIdentifier(JJTRINGIDENTIFIER);
				if (jjtree.peekNode() instanceof ASTLowAndBond) {
					bond = (ASTLowAndBond)jjtree.popNode(); // pop the bond
					ringId.jjtAddChild(bond, 0);
				}
				ringId.setRingId(ringIdToken);
				atom.jjtAddChild(ringId, atom.jjtGetNumChildren());
	  		}	
	  		|
	  		atom = AtomExpression()
	  	)
	  ) 
	  |
	  ( <L_PAREN> ( LowAndBond() )? SmartsExpression() <R_PAREN> ) 
	)* 
}

ASTAtom	 AtomExpression() #Atom : 
{
	Token firstToken;
	Token secondToken;
	Token rightBracket;
	ASTAtomicMass massNode = null;
}
{
	( 
	    ( 
	    
	    	<L_BRACKET> { token_source.SwitchTo(SMARTSParserConstants.ATOM_EXPRESSION);
firstToken = getToken(1); 
secondToken = getToken(2); }
	    	( AtomicMass() { massNode = (ASTAtomicMass)jjtree.popNode(); }	)?
	    	LowAndExpression() 
	    	{
				if (massNode != null) { // insert AtomicMass node into expression       
					ASTLowAndExpression topNode = (ASTLowAndExpression)jjtree.popNode();
					topNode.insertLeafChild(massNode);
					jjtree.pushNode(topNode);
				}
	    	}
	    	<R_BRACKET> { token_source.SwitchTo(SMARTSParserConstants.DEFAULT); rightBracket = token; }
	    	{   
	    		Token HToken = null;
	    		// If the LowAndExpression is "[H]", change it to an ExplicitAtom
	    		if (firstToken.image.equals("H")) {
	    			HToken = firstToken;
	    		} else if (massNode != null && massNode.getMass() <= 3 && secondToken != null && secondToken.image.equals("H")) {
	    			HToken = secondToken;
	    		}
	    		if (HToken != null) {
		    		if ( (rightBracket.beginColumn - HToken.endColumn) == 1) {
		    			jjtree.popNode();
		    			ASTExplicitAtom explicitAtom = new ASTExplicitAtom(JJTEXPLICITATOM);
                        if (massNode!= null) {
						    if (massNode.getMass() == 2) explicitAtom.setSymbol("D");
						    else if (massNode.getMass() == 3) explicitAtom.setSymbol("T");
						    else if (massNode.getMass() == 1) explicitAtom.setSymbol("H");
						    } else {
						      explicitAtom.setSymbol("H");
						    }
						jjtree.pushNode(explicitAtom);
		    		}
	    		}
	    	}
	    ) 
	    | 
	    ExplicitAtomExpression() 
	)
	{
		return jjtThis;
	}
}

void LowAndBond() #LowAndBond : {}
{
    OrBond() ( <L_AND> LowAndBond() ) ?
}

void OrBond() #OrBond : {}
{
    ExplicitHighAndBond() ( <OR> OrBond() ) ?
}

void ExplicitHighAndBond() #ExplicitHighAndBond : {}
{
    ImplicitHighAndBond() ( <H_AND> ExplicitHighAndBond() ) ?
}

void ImplicitHighAndBond() #ImplicitHighAndBond : {}
{
    NotBond() ( ImplicitHighAndBond() ) ?
}

void NotBond() #NotBond : {}
{
    [ <NOT> { jjtThis.setType(SMARTSParserConstants.NOT); } ] SimpleBond() 
}
void SimpleBond() #SimpleBond : {}
{
    (
        LOOKAHEAD(2)
        <S_BOND> 
        | 
        <UP_S_BOND> // TODO: Need API
        | 
        <DN_S_BOND> // TODO: Need API
        | 
        <UP_OR_UNSPECIFIED_S_BOND> // TODO: Need API
        | 
        <DN_OR_UNSPECIFIED_S_BOND> // TODO: Need API
        | 
        <D_BOND> 
        | 
        <T_BOND> 
        | 
        <AR_BOND> 
        | 
        <ANY_BOND> 
        | 
        <R_BOND>
    )
    {
        jjtThis.setBondType(token.kind);
    }
}

void ExplicitAtomExpression() #ExplicitAtom : {}
{
    ( <B> | <C> | <N> | <O> | <P> | <S> | <F> | <CL> | <BR> | <I> | <WILDCARD> | <A> | <a> | <c> | <n> | <o> | <s> | <p> | <se> | <as>)
    {
        jjtThis.setSymbol(token.image);
    }
}

// TODO: This requires a fully implemented SMARTSAtom API (or something else) that 
// could encapsulate logical criterias
void LowAndExpression() #LowAndExpression : {}
{
    OrExpression() ( <L_AND> LowAndExpression() ) ? 
}

void OrExpression() #OrExpression : {}
{
    ExplicitHighAndExpression() ( <OR> OrExpression() ) ?
}

void ExplicitHighAndExpression() #ExplicitHighAndExpression : {}
{
    ( ImplicitHighAndExpression() ) ( <H_AND> ExplicitHighAndExpression() ) ?
}

void ImplicitHighAndExpression() #ImplicitHighAndExpression : {}
{
    NotExpression() ( ImplicitHighAndExpression() ) ?  
}

void NotExpression() #NotExpression : 
{ jjtThis.setType(SMARTSParserConstants.DEFAULT); }
{
    [ <NOT> { jjtThis.setType(SMARTSParserConstants.NOT); } ] 
    ( PrimitiveAtomExpression() | RecursiveSmartsExpression() )
}

void RecursiveSmartsExpression() #RecursiveSmartsExpression : {}
{
    <DOLLAR> <L_PAREN> {token_source.SwitchTo(SMARTSParserConstants.DEFAULT); }
    GroupExpression() <R_PAREN> {token_source.SwitchTo(SMARTSParserConstants.ATOM_EXPRESSION); }
}

void PrimitiveAtomExpression() : {}
{
    (
        NoHydrogenElement() 
        |
        AnyAtom()
        |
        Aromatic()
        |
        Aliphatic()
        |
        ExplicitConnectivity()
        |
        TotalHCount()
        |
        ImplicitHCount()
        |
        RingMembership()
        |
        SmallestRingSize()
        |
        Valence()
        |
        TotalConnectivity()
        |
        RingConnectivity()
        |
        Charge()
        |
        AtomicNumber()
        |
        Chirality()
        |
        PeriodicGroupNumber()
        |
        NonCHHeavyAtom()
        |
        HybridizationNumber()
    )
}

void TotalHCount() #TotalHCount : 
{ StringBuffer digits = new StringBuffer(); }
{
    <H> { jjtThis.setCount(1); } [ ( <DIGIT> { digits.append(token.image); } )+ 
    { jjtThis.setCount( Integer.parseInt(digits.toString()) ); } ]
}

void ImplicitHCount() #ImplicitHCount: 
{ StringBuffer digits = new StringBuffer(); }
{
    <h> { jjtThis.setCount(1); } [ ( <DIGIT> { digits.append(token.image); } )+ 
    { jjtThis.setCount( Integer.parseInt(digits.toString()) ); } ]
}

void ExplicitConnectivity() #ExplicitConnectivity : 
{ StringBuffer digits = new StringBuffer(); }
{
    <D> { jjtThis.setNumOfConnection(1); } 
    [ ( <DIGIT> { digits.append(token.image); } )+ 
    { jjtThis.setNumOfConnection( Integer.parseInt(digits.toString()) ); } ]
}

void AtomicNumber() #AtomicNumber : 
{ StringBuffer digits = new StringBuffer(); }
{
    "#" ( <DIGIT> { digits.append(token.image); } )+ 
    { jjtThis.setNumber( Integer.parseInt(digits.toString()) ); }
}

void HybridizationNumber() #HybrdizationNumber :
{}
{
    <CARET> ( <DIGIT> ) {
        int tmp = Integer.parseInt(token.image);
        if (tmp < 1 || tmp > 8) throw new ParseException("Hybridization number must be between 1 & 8");
        jjtThis.setHybridizationNumber(tmp);
   }
}
        
void Charge() #Charge : 
{ StringBuffer digits = new StringBuffer(); }
{
    // Here assuming nobody will write anything like -----------... 
    // with more than 8 of them
    LOOKAHEAD(2)
    "+" { jjtThis.setPositive(true); jjtThis.setCharge(1); } 
      [ ( <DIGIT> { digits.append(token.image); } )+ 
      { jjtThis.setCharge( Integer.parseInt(digits.toString()) ); } ]
    | "-" { jjtThis.setPositive(false); jjtThis.setCharge(1); } 
      [ ( <DIGIT> { digits.append(token.image); } )+ 
      { jjtThis.setCharge( Integer.parseInt(digits.toString()) ); } ]
    | "--"          { jjtThis.setPositive(false); jjtThis.setCharge(2); }
    | "---"         { jjtThis.setPositive(false); jjtThis.setCharge(3); }
    | "----"        { jjtThis.setPositive(false); jjtThis.setCharge(4); }
    | "-----"       { jjtThis.setPositive(false); jjtThis.setCharge(5); }
    | "------"      { jjtThis.setPositive(false); jjtThis.setCharge(6); }
    | "-------"     { jjtThis.setPositive(false); jjtThis.setCharge(7); } 
    | "--------"    { jjtThis.setPositive(false); jjtThis.setCharge(8); }
    | "++"          { jjtThis.setPositive(true); jjtThis.setCharge(2); }   
    | "+++"         { jjtThis.setPositive(true); jjtThis.setCharge(3); }
    | "++++"        { jjtThis.setPositive(true); jjtThis.setCharge(4); }
    | "+++++"       { jjtThis.setPositive(true); jjtThis.setCharge(5); }
    | "++++++"      { jjtThis.setPositive(true); jjtThis.setCharge(6); }
    | "+++++++"     { jjtThis.setPositive(true); jjtThis.setCharge(7); }
    | "++++++++"    { jjtThis.setPositive(true); jjtThis.setCharge(8); } 
}

void RingConnectivity() #RingConnectivity : {}
{
    <x> { jjtThis.setNumOfConnection(1); } 
    [ ( <DIGIT> )+ { jjtThis.setNumOfConnection( Integer.parseInt(token.image) ); } ]
}

void PeriodicGroupNumber() throws ParseException #PeriodicGroupNumber :
{ StringBuffer digits = new StringBuffer(); }
{
    <G> { }
    ( <DIGIT> { digits.append(token.image); } )+
    { int tmpInt = Integer.parseInt(digits.toString());
      if (tmpInt < 1 || tmpInt > 18) throw new ParseException("Invalid group number");
      jjtThis.setGroupNumber( Integer.parseInt(digits.toString()) ); }

}

void TotalConnectivity() #TotalConnectivity : 
{ StringBuffer digits = new StringBuffer(); }
{
    <X> { jjtThis.setNumOfConnection(1); } 
    [ ( <DIGIT> { digits.append(token.image); } )+ 
    { jjtThis.setNumOfConnection( Integer.parseInt(digits.toString()) ); } ]
}

void Valence() #Valence : 
{ StringBuffer digits = new StringBuffer(); }
{
    <v> { jjtThis.setOrder(1); } 
    [ ( <DIGIT> { digits.append(token.image); })+ 
    { jjtThis.setOrder( Integer.parseInt(digits.toString()) ); } ]
}

void RingMembership() #RingMembership : 
{ StringBuffer digits = new StringBuffer(); }
{
    <R> { jjtThis.setNumOfMembership(-1); }
    [ ( <DIGIT> { digits.append(token.image); } )+ 
    { jjtThis.setNumOfMembership( Integer.parseInt(digits.toString()) ); } ]
}

void SmallestRingSize() #SmallestRingSize : 
{ StringBuffer digits = new StringBuffer(); }
{
    <r> { jjtThis.setSize(1); } 
    [ ( <DIGIT> { digits.append(token.image); } )+ 
    { jjtThis.setSize( Integer.parseInt(digits.toString()) ); } ]
}

void Aliphatic() #Aliphatic : {}
{
    <A> 
}

void NonCHHeavyAtom() #NonCHHeavyAtom : {}
{
    <HX>
}

void Aromatic() #Aromatic : {}
{
    <a>
}

void AnyAtom() #AnyAtom : {}
{
    <WILDCARD>
}

void AtomicMass() #AtomicMass : 
{ StringBuffer digits = new StringBuffer(); }
{
    ( <DIGIT> { digits.append(token.image); } )+
    {
    	jjtThis.setMass( Integer.parseInt(digits.toString()) ); 
    }
}

void RingIdentifier() #RingIdentifier: {}
{
	LowAndBond() <DIGIT>
}

void Chirality() #Chirality : 
{ StringBuffer digits = new StringBuffer(); }
{
    "@" { jjtThis.setClockwise(false); }
    (
        "@" { jjtThis.setClockwise(true); }
    )? 
    ( 
    	<Q_MARK> { jjtThis.setUnspecified(true); }
    )?
}

void NoHydrogenElement() #Element: {}
{
	(
    <HE> | <LI> | <BE> | <NE> | <NA> | <MG> | <AL> | <SI> | <AR> | <CA> | <SC> |
    <TI> | <CR> | <MN> | <FE> | <CO> | <NI> | <CU> | <ZN> | <GA> | <GE> | <AS> |
    <SE> | <BR> | <KR> | <RB> | <SR> | <ZR> | <NB> | <MO> | <TC> | <RU> | <RH> |
    <PD> | <AG> | <CD> | <IN> | <SN> | <SB> | <TE> | <XE> | <CS> | <BA> | <LA> |
    <HF> | <TA> | <W>  | <RE> | <OS> | <IR> | <PT> | <AU> | <HG> | <TL> | <PB> | 
    <BI> | <PO> | <AT> | <RN> | <FR> | <RA> | <AC> | <TH> | <PA> | <CL> |
	<B> | <C> | <N> | <O> | <F> | <P> | <S> | <K> | <V> | <Y> | <I> | <U> | 
    <c> | <o> | <n> | <s> | <p> | <as> | <se> | <PU> | <AM> | <CM> | <BK> | <CF> |
    <ES> | <FM> | <MD> | <NO> | <LR>  | <NP>   | <CE>   | <ND>   | <PM>   | <SM>  |
    <EU>   | <GD>   | <TB>   | <DY>   | <HO>   | <ER>   | <TM>   | <YB>   | <LU>   | <PR>
    )
    {
        jjtThis.setSymbol(token.image);
    }
}
