<project name="CDK" default="dist-all" basedir=".">

        <property file="build.props"/>

        <!-- compile options -->
        <property name="build.sysclasspath" value="ignore" />
        <property name="build.compiler" value="modern" />
        <property name="compile.target.version" value="1.5"/>
        <property name="debug" value="on" />
        <property name="deprecation" value="on" />
        <property name="optimization" value="off" />
        <property name="threadCount" value="4" />
        <property name="parallel" value="false"/>

        <!-- patches to apply -->

       <!-- directories -->
        <property name="build" value="build" />
        <property name="build.src" value="${build}/src" />
        <property name="sourcedist" value="sourcedist" />
        <property name="dist" value="dist" />
        <property name="doc" value="doc" />
        <property name="src" value="src" />
        <property name="lib" value="jar" />
        <property name="devellib" value="develjar" />
        <property name="src.tests" value="${src}/test/org/openscience/cdk/test" />
        <property name="reports.tests" value="reports" />
        <property name="appjars.dir" value="${dist}/appjars" />
        <property name="metainf" value="${src}/META-INF" />
 
        <!-- class to run for testing-->
        <property name="testclass" value="CDKTests" />
        <property name="arg1" value="" />
        <property name="arg2" value="" />
        <property name="arg3" value="" />
        <property name="arg4" value="" />

         <property environment="env" />

    <!-- Include the ant-contrib goodies -->
    <taskdef name="javancss" classname="javancss.JavancssAntTask">
        <classpath>
            <pathelement location="${basedir}/develjar/javacc.jar"/>
            <pathelement location="${basedir}/develjar/javancss.jar"/>
            <pathelement location="${basedir}/develjar/ccl.jar"/>
            <pathelement location="${basedir}/develjar/jhbasic.jar"/>
        </classpath>
    </taskdef>
    <!-- Include the JavaNCSS goodies -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${basedir}/develjar/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

<!--
    <shellscript shell="bash" outputproperty="svn.output">
     svn info
    </shellscript>
    <propertyregex property="svn.rev" input="${svn.output}" regexp="Revision: ([0-9]*)" select="\1" />
-->

    <target id="info" name="info" depends="check">
            <!-- Gives information about the building process. -->
            <echo message="Platform:" />
            <echo message="             OS: ${os.name}" />
            <echo message="   Architecture: ${os.arch}" />
            <echo message="        Version: ${os.version}" />
            <echo message=" Mac OS/X found: ${isMacOsX}" />
            <echo message="" />
            <echo message="Java/Ant Environment:" />
            <echo message="   Java version: ${java.version}" />
            <echo message="    Java vendor: ${java.vendor}" />
            <echo message="       Java dir: ${java.home}" />
            <echo message="   Java ext dir: ${java.ext.dirs}" />
            <echo message="    Ant version: ${ant.version}" />
            <echo message="    ${ANT_HOME}: ${ant.home}" />
            <echo message="       hasAnt17: ${hasAnt17}" />
            <echo message="" />
            <echo message="CDK Environment:" />
            <echo message="    CDK version: ${version}" />
            <echo message="      build.xml: $Id$" />
            <echo message="    Junit found: ${junit.present}" />
            <echo message=" --- required libraries ---" />
            <echo message="  Vecmath found: ${vecmath.present}" />
            <echo message="    Log4j found: ${log4j.present}" />
            <echo message="  JGraphT found: ${jgrapht.present}" />
            <echo message=" --- distributed (but optional) libraries ---" />
            <echo message="   CMLDOM found: ${cmllibs.present}" />
            <echo message=" --- optional libraries ---" />
            <echo message="" />
            <echo message="Compiling:" />
            <echo message="            for: ${build.compiler}" />
            <echo message="         target: ${compile.target.version}" />
            <echo message="          debug: ${debug}" />
            <echo message="    deprecation: ${deprecation}" />
            <echo message="   optimization: ${optimization}" />
            <echo message="       parallel: ${parallel}" />
            <echo message="        threads: ${threadCount}" />
            <echo message="" />
            <echo message="Available Targets" />
            <echo message="          clean: Remove class files and any temporary files" />
            <echo message="       dist-all: Compile all modules" />
            <echo message="       test-all: Performs a full JUnit test for all modules" />
            <echo message="     dist-large: Create the comprehensive jar, with all modules" />
            <echo message="  test-dist-all: Compile all test modules" />
            <echo message="test-dist-large: Create a single jar file with all test modules" />
            <echo message="    jarTestdata: Create the jar file with all test data. Used in testing" />
            <echo message="" />
        </target>

    <!-- See what platform were on -->
    
        <target id="checkPlatforms" name="checkPlatforms">
            <condition property="isMacOsX">
                <and>
                    <os family="mac"/>
                    <os family="unix"/>
                </and>
            </condition>
        </target>

        <target id="check" name="check" depends="checkPlatforms">
            <!-- Check wether Doclets are compiled and output is generated -->
            <uptodate property="dotjavafiles.uptodate"
                      targetfile="${build}/core.javafiles">
              <srcfiles dir="${src}" includes="**/*.java" />
            </uptodate>
            <condition property="dotjjfiles.uptodate">
              <and>
                <uptodate property="NomParserJavafiles.uptodate"
                          targetfile="${src}/main/org/openscience/cdk/iupac/parser/NomParser.java">
                  <srcfiles dir="${src}/main/" includes="org/openscience/cdk/iupac/parser/NomParser.jj" />
                </uptodate>
                <uptodate property="SMARTSParserJJTJavafiles.uptodate"
                		  targetfile="${src}/main/org/openscience/cdk/smiles/smarts/parser/SMARTSParser.java">
                  <srcfiles dir="${src}/main/" includes="org/openscience/cdk/smiles/smarts/parser/SMARTSParser.jj" />
                </uptodate>
              </and>
            </condition>

            <!-- Checks which parts of CDK can be build. -->

            <!-- test for optional jars -->
            <available property="vecmath.present"
                       file="${lib}/vecmath1.2-1.14.jar"/>
            <available property="log4j.present"
                       file="${lib}/log4j.jar"/>
            <available property="jgrapht.present"
                       file="${lib}/jgrapht-0.6.0.jar"/>

            <!-- test for optional jars -->
            <condition property="cmllibs.present">
              <or>
                <available file="${lib}/jumbo-with-fix-by-jonalv.jar"/>
              </or>
            </condition>

            <condition property="junit.present">
              <or>
                <available file="${ant.home}/lib/junit.jar"/>
                <available file="${devellib}/junit-4.10.jar"/>
              </or>
            </condition>

            <!-- test Ant version -->
            <condition property="hasAnt17">
              <or>
              <contains string="${ant.version}" substring="1.7.1"/>
              <contains string="${ant.version}" substring="1.8"/>
              </or>
            </condition>


            <!-- test Java version -->
            <condition property="isJava13">
                <contains string="${java.version}" substring="1.3"/>
            </condition>
            <condition property="isJava14">
                <contains string="${java.version}" substring="1.4"/>
            </condition>
            <condition property="isJava15">
                <contains string="${java.version}" substring="1.5"/>
            </condition>
            <condition property="isJava16">
                <contains string="${java.version}" substring="1.6."/>
            </condition>
            <condition property="isJava17">
                <contains string="${java.version}" substring="1.7."/>
            </condition>
            <condition property="isJava14+">
                <or>
                    <contains string="${java.version}" substring="1.4"/>
                    <contains string="${java.version}" substring="1.5"/>
                    <contains string="${java.version}" substring="1.6"/>
                    <contains string="${java.version}" substring="1.7"/> 
                </or>
            </condition>
            <condition property="isJava15+">
                <or>
                    <contains string="${java.version}" substring="1.5"/>
                    <contains string="${java.version}" substring="1.6"/>
                    <contains string="${java.version}" substring="1.7"/>
                </or>
            </condition>
            <condition property="isNotJava15+">
                <not>
                  <or>
                    <contains string="${java.version}" substring="1.5"/>
                    <contains string="${java.version}" substring="1.6"/>
                    <contains string="${java.version}" substring="1.7"/>
                  </or>
            	</not>
            </condition>
            <fail if="isNotJava15+" message="This CDK release requires Java5 or better."/>
            <fail unless="hasAnt17" message="This CDK release requires Ant 1.7.1 or better."/>
        </target>


        <target id="init" name="init" depends="check, setupBuildDir"/>
        <target id="customize" name="customize" depends="javacc"/>

        <target id="setupBuildDir" name="setupBuildDir">
                <tstamp />
                <mkdir dir="${build}" />
                <mkdir dir="${sourcedist}" />
                <mkdir dir="${dist}" />
                <mkdir dir="${reports.tests}" />
        </target>

        <target id="clean" name="clean" description="Removes autogenerated files.">
                <delete>
                    <fileset dir="." includes="**/*~" />
                    <fileset dir="." includes="*.tar.gz" />
                    <fileset dir="." includes="*.zip" />
                    <fileset dir="." includes="*.rda" />
                    <fileset dir="${src}" includes="*.entitylist" />
                    <!-- remove java files generated with JavaCC -->
                    <fileset dir="${src}/main/org/openscience/cdk/smiles/smarts" includes="*.java">
                        <exclude name="SMARTSQueryTool.java" />
                    </fileset>
                    <fileset dir="${src}/main/org/openscience/cdk/smiles/smarts/parser" 
                             includes="SMARTSParser*.java,SMARTSParser.jj,JJT*,ParseException.java,SimpleCharStream.java,Token*.java" />
                    <fileset dir="${src}/main/org/openscience/cdk/iupac/parser" includes="*.java">
                        <!-- the next are from CVS -->
                        <exclude name="AttachedGroup.java" />
                        <exclude name="MoleculeBuilder.java" />
                    </fileset>
                    <fileset dir="${src}/main/">
                        <include name="net/sf/cdk/tools/*.class" />
                    </fileset>
                </delete>

                <delete dir="${build}" />
                <delete dir="${sourcedist}" />
                <delete dir="${dist}" />
                <delete dir="${reports.tests}" />
        </target>

        <target name="runDoclet" id="runDoclet" depends="check, customize">
            <echo>Not skipping doclet run...</echo>
            <mkdir dir="${build}" />
        	<javac includes="net/sf/cdk/tools/MakeJavafilesFiles.java"
        	    srcdir="${src}/main/" destdir="${build}" optimize="${optimization}"
        	    debug="${debug}" deprecation="${deprecation}" source="${compile.target.version}" target="${compile.target.version}"/>
        	<java classpath="${build}" classname="net.sf.cdk.tools.MakeJavafilesFiles">
                  <arg value="${src}/META-INF"/>
                  <arg value="${src}/main"/>
                  <arg value="${build}"/>
        	</java>
        	<java classpath="${build}" classname="net.sf.cdk.tools.MakeJavafilesFiles">
                  <arg value="${src}/META-INF"/>
                  <arg value="${src}/test"/>
                  <arg value="${build}"/>
        	</java>
        </target>

        <target id="compile-needed-test" name="compile-needed-test">
            <if>
                <matches string="${module}" pattern="^test"/>
                <then>
                    <property name="source" value="src/test"/>
                </then>
                <else>
                    <property name="source" value="src/main"/>
                </else>
            </if>
            <uptodate property="module-uptodate" targetfile="${dist}/jar/cdk-${module}.jar">
                <srcfiles dir="${source}">
                    <includesfile name="${build}/${module}.javafiles"/>
                </srcfiles>
            </uptodate>
        </target>

        <target id="compile-init" name="compile-init"
                depends="init, check, runDoclet"/>

        <target id="qa-module" name="qa-module"
                depends="check, dist.init">
          <echo message="Running QA for CDK's ${module} module" />

          <antcall target="test-module">
              <param name="module" value="${module}"/>
          </antcall>

          <ant antfile="javadoc.xml" target="compileDocTests"/>
          <ant antfile="javadoc.xml" target="ojdcheck-module">
              <property name="module" value="${module}"/>
          </ant>
          <ant antfile="pmd.xml" target="test-module">
              <property name="pmd.test" value="custom"/>
              <property name="module" value="${module}"/>
              <property name="lib" value="develjar" />
          </ant>
          <ant antfile="pmd-unused.xml" target="test-module">
              <property name="pmd.test" value="custom"/>
              <property name="module" value="${module}"/>
              <property name="lib" value="develjar" />
          </ant>
          <ant antfile="pmd-migrating.xml" target="test-module">
              <property name="pmd.test" value="migrating"/>
              <property name="module" value="${module}"/>
              <property name="lib" value="develjar" />
          </ant>
        </target>

        <target id="compile-module" name="compile-module"
                depends="check, dist.init, compile-needed-test"
                unless="module-uptodate">

            <if>
                <matches string="${module}" pattern="^test"/>
                <then>
                    <property name="source" value="src/test"/>
                </then>
                <else>
                    <property name="source" value="src/main"/>
                </else>
            </if>

            <echo message="Compiling classes for CDK's ${module} module from ${source}..." />

            <!-- check for availability for meta info files -->
            <available file="${metainf}/${module}.datafiles" property="module.datafiles.present"/>
            <available file="${metainf}/${module}.extrafiles" property="module.extrafiles.present"/>
            <available file="${metainf}/${module}.buildfiles" property="module.buildfiles.present"/>
            <available file="${metainf}/${module}.cdkdepends" property="module.cdkdepends.present"/>
            <available file="${metainf}/${module}.libdepends" property="module.libdepends.present"/>
            <available file="${metainf}/${module}.devellibdepends" property="module.devellibdepends.present"/>
            <available file="${metainf}/${module}.autogenerated" property="module.autogenerated.present"/>

            <!-- be somewhat informative -->
            <echo message="Datafiles defined: ${module.datafiles.present}"/>
            <echo message="Extra files defined: ${module.extrafiles.present}"/>
            <echo message="CDK dependencies defined: ${module.cdkdepends.present}"/>
            <echo message="Library dependencies defined: ${module.libdepends.present}"/>
            <echo message="Developer Library dependencies defined: ${module.devellibdepends.present}"/>
            <echo message="Autogenerated files specified: ${module.autogenerated.present}"/>

            <!-- normally javac compiles not just the given files, but also missing
                 classes that are in the same src/ directory. By making a copy first,
                 we explicitely make it impossible to compile files that are not
                 marked for a specific module -->
            <mkdir dir="${build.src}/${module}"/>
            <mkdir dir="${build}/${module}"/>
            <copy todir="${build.src}/${module}">
                <fileset dir="${source}">
                    <excludesfile name="${build}/java1.4+.javafiles" if="isJava13"/>
                    <!-- excludesfile name="${build}/java1.4.javafiles" unless="isJava14"/ -->
                    <!-- excludesfile name="${build}/java1.5.javafiles" unless="isJava15"/ -->
                    <excludesfile name="${build}/java1.5+.javafiles" if="isNotJava15"/>
                    <excludesfile name="${build}/ant1.6.javafiles" unless="hasAnt17"/>

                    <includesfile name="${build}/${module}.javafiles"/>
                    <includesfile name="${metainf}/${module}.autogenerated" if="module.autogenerated.present"/>
                </fileset>
            </copy>
            <copy todir="${build}" file="build.props" />

            <!-- ok, now that we have a copy, compile this copy -->
            <javac srcdir="${build.src}/${module}" destdir="${build}/${module}" optimize="${optimization}"
                    debug="${debug}" deprecation="${deprecation}" source="${compile.target.version}" target="${compile.target.version}">
                <classpath>
                    <fileset dir="${lib}" >
                        <exclude name="**/*" unless="module.libdepends.present" />
                        <includesfile name="${metainf}/${module}.libdepends" if="module.libdepends.present" />
                    </fileset>
                    <fileset dir="${devellib}">
                        <exclude name="**/*" unless="module.devellibdepends.present" />
                        <includesfile name="${metainf}/${module}.devellibdepends" if="module.devellibdepends.present" />
                    </fileset>
                    <fileset dir="${dist}/jar">
                        <exclude name="**/*" unless="module.cdkdepends.present" />
                        <includesfile name="${metainf}/${module}.cdkdepends" if="module.cdkdepends.present" />
                    </fileset>
                </classpath>

                <excludesfile name="${build}/java1.4+.javafiles" if="isJava13"/>
                <!-- excludesfile name="${build}/java1.4.javafiles" unless="isJava14"/ -->
                <!-- excludesfile name="${build}/java1.5.javafiles" unless="isJava15"/ -->
                <excludesfile name="${build}/java1.5+.javafiles" if="isNotJava15"/>
                <excludesfile name="${build}/ant1.6.javafiles" unless="hasAnt17"/>

                <includesfile name="${build}/${module}.javafiles"/>
                <includesfile name="${metainf}/${module}.autogenerated" if="module.autogenerated.present"/>
            </javac>

        	<!-- create a autogenerated.classes file, if applicable, so that these files can be included in the jar -->
            <if>
                <istrue value="${module.autogenerated.present}"/>
                <then>
                    <copy file="${metainf}/${module}.autogenerated" tofile="${build}/${module}.autogenerated.classes"
                          failonerror="false"/>
                    <replace dir="${build}" token=".java" value="*.class">
                        <include name="*.autogenerated.classes"/>
                    </replace>
                </then>
            </if>


            <!-- and then jar things up into the module jar -->
            <jar jarfile="${dist}/jar/cdk-${module}.jar">
               <fileset dir="${build}/${module}">
                    <includesfile name="${build}/${module}.classes" />
                    <includesfile name="${build}/${module}.autogenerated.classes" if="module.autogenerated.present"/>
                    <excludesfile name="${build}/java1.4+.classes" if="isJava13"/>
                    <!-- excludesfile name="${build}/java1.4.classes" unless="isJava14"/ -->
                    <!-- excludesfile name="${build}/java1.5.javafiles" unless="isJava15"/ -->
                    <excludesfile name="${build}/java1.5+.javafiles" if="isNotJava15"/>
                    <excludesfile name="${build}/ant1.6.classes" unless="hasAnt17"/>
               </fileset>
               <fileset dir="${build}">
                    <include name="${module}.javafiles" />
               </fileset>
               <fileset dir="${source}">
                    <exclude name="**/*" unless="module.datafiles.present"/>
                    <includesfile name="${metainf}/${module}.datafiles" if="module.datafiles.present" />
               </fileset>
               <fileset dir="${src}">
                    <exclude name="**/*" unless="module.extrafiles.present"/>
                    <includesfile name="${metainf}/${module}.extrafiles" if="module.extrafiles.present" />
               </fileset>
                <fileset dir="${build}">
                     <exclude name="**/*" unless="module.buildfiles.present"/>
                     <includesfile name="${metainf}/${module}.buildfiles" if="module.buildfiles.present" />
                </fileset>
            </jar>

        	<jar jarfile="${dist}/jar/cdk-${module}-sources.jar">
				<fileset dir="${build.src}/${module}">
					<include name="**/*.java" />
				</fileset>
			</jar>
        	
            <!-- clean up afterwards -->
            <!-- delete dir="${build.src}/${module}"/>
            <delete dir="${build}/${module}"/ -->
       </target>

        <!-- Convert the JavaCC .jj file to the correct .java files for the IUPAC parser -->
        <target id="javacc" name="javacc" depends="init, check" if="hasAnt17" unless="dotjjfiles.uptodate">
          <echo message="Compiling Ant 1.6 depending classes." />
          <!-- the IUPAC name parser -->
          <delete>
              <fileset id="javacc-generated"
                dir="${src}/main/org/openscience/cdk/iupac/parser/"
                includes="NomParser*.java,ParseException.java,SimpleCharStream.java,Token.java,TokenMgrError.java"/>
          </delete>
          <javacc target="${src}/main/org/openscience/cdk/iupac/parser/NomParser.jj"
            outputdirectory="${src}/main/org/openscience/cdk/iupac/parser/"
            javacchome="${lib}"/>         
          <delete>
              <fileset id="javacc-generated"
                dir="${src}/main/org/openscience/cdk/smiles/smarts/parser/"
                includes="SMARTSParser*.java,SMARTSParser.jj,JJT*,ParseException.java,SimpleCharStream.java,Token*.java"/>
          </delete>
          <jjtree target="${src}/main/org/openscience/cdk/smiles/smarts/parser/SMARTSParser.jjt"
                  javacchome="${lib}"
                  outputdirectory="${src}/main/org/openscience/cdk/smiles/smarts/parser/"/>
	 <javacc target="${src}/main/org/openscience/cdk/smiles/smarts/parser/SMARTSParser.jj"
                  javacchome="${lib}"
                  outputdirectory="${src}/main/org/openscience/cdk/smiles/smarts/parser/"/>

	 <!-- OK, we now need to do some replacements such as 
	      adding cdk.module tags and changing access modes
	  -->
         <replace dir="${src}/main/org/openscience/cdk/smiles/smarts/parser" 
	          excludes="AST*.java,SMARTSParser.jjt,SMARTSParser.jj,*Node.java"
                  token="package org.openscience.cdk.smiles.smarts.parser;" summary="true" >
                  <replacevalue>package org.openscience.cdk.smiles.smarts.parser;

/** 
*
* @cdk.module smarts 
*/</replacevalue>
         </replace>
        </target>

        <target id="dist.init" name="dist.init">
            <mkdir dir="${dist}/jar" />
        </target>

    <target id="dist-java3d" name="dist-java3d" depends="nocompile-java3d, compile-java3d"/>
    <target id="nocompile-java3d" name="nocompile-java3d" unless="${java3d.present}">
      <echo message="Java3d is not found. Removed depending functionality. Java3d can be downloaded from http://java.sun.com/."/>
    </target>
    <target id="compile-java3d" name="compile-java3d" if="${java3d.present}">
    	<antcall target="compile-module"><param name="module" value="java3d"/></antcall>
    </target>

        <target id="dist-optional" name="dist-optional" depends="dist-all"
        	description="Compile CDK modules that require optional libraries">
        	<antcall target="dist-java3d"/>
        </target>

    <target id="dist-all" name="dist-all" description="dist-all">
        <antcall target="compile-init"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="interfaces,annotation"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="core,ioformats"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="silent,data,dict,diff,qm,standard,log4j"/>
        <foreach target="compile-module" param="module" trim="yes"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="datadebug,isomorphism,atomtype,render,valencycheck,
                  formula,cip"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="io,structgen"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="renderbasic"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="renderextra"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="pdb,smiles,sdg,inchi,libiocml"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="control,extra,fragment,reaction,pdbcml,libiomd"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="charges,smarts,signature"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="qm,qsar,ionpot,fingerprint,pcore,smsd,tautomer"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="renderawt"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="qsaratomic,qsarbond,qsarprotein,qsarcml,qsarmolecular"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="forcefield,qsarionpot,iordf"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="builder3d,builder3dtools"/>
    </target>

    <target id="test-dist-all" name="test-dist-all" description="test-dist-all">
        <antcall target="compile-init"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="test"/>
        <foreach target="compile-module" param="module" trim="true"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="test-interfaces,test-libiocml,test-qsar,test-io,test-core,
        	      test-valencycheck,test-smarts,test-standard,test-reaction,
                  test-pcore,test-sdg,test-forcefield,test-fingerprint,
                  test-ionpot,test-qm,test-isomorphism,test-libiomd,test-dict,
                  test-diff,test-charges,test-inchi,test-formula,
                  test-render,test-ioformats,test-log4j,test-cip"/>
        <foreach target="compile-module" param="module" trim="true"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="test-data,test-qsaratomic,test-qsarbond,
                  test-pdb,test-smiles,test-extra,test-fragment,test-atomtype,
                  test-structgen,test-iordf,test-silent"/>
        <foreach target="compile-module" param="module" trim="true"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="test-qsarmolecular,test-builder3d,test-datadebug"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="test-qsarprotein,test-qsarionpot,test-smsd,test-tautomer"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="test-signature"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="test-renderbasic"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="test-renderawt"/>
        <foreach target="compile-module" param="module"
            parallel="${parallel}" maxthreads="${threadCount}"
            list="test-renderextra"/>
    </target>

	<target id="jarTestdata" name="jarTestdata" description="Creates jar files with test data.">
		<mkdir dir="${dist}/jar"/>
        <jar jarfile="${dist}/jar/cdk-testdata.jar">
            <fileset dir="${src}/test">
                <include name="data/**/*" />
            </fileset>
        </jar>
	</target>
	
	<target id="dist-large" name="dist-large" depends="dist-all"
            description="Builds one big jar file for the CDK, including third-party libraries.">

            <!-- first unjar the CDK and other jars we need -->
            <mkdir dir="${appjars.dir}"/>
            <unjar dest="${appjars.dir}">
                <fileset dir="${lib}">
                    <includesfile name="${metainf}/builder3d.libdepends"/>
                    <includesfile name="${metainf}/builder3dtools.libdepends"/>
                    <includesfile name="${metainf}/charges.libdepends"/>
                    <includesfile name="${metainf}/log4j.libdepends"/>
                    <includesfile name="${metainf}/control.libdepends"/>
                    <includesfile name="${metainf}/datadebug.libdepends"/>
                    <includesfile name="${metainf}/data.libdepends"/>
                    <includesfile name="${metainf}/silent.libdepends"/>
                    <includesfile name="${metainf}/extra.libdepends"/>
                    <includesfile name="${metainf}/cip.libdepends"/>
                    <includesfile name="${metainf}/io.libdepends"/>
                    <includesfile name="${metainf}/libiocml.libdepends"/>
                    <includesfile name="${metainf}/pdbcml.libdepends"/>
                    <includesfile name="${metainf}/pdb.libdepends"/>
                    <includesfile name="${metainf}/qsar.libdepends"/>
                    <includesfile name="${metainf}/qsaratomic.libdepends"/>
                    <includesfile name="${metainf}/qsarbond.libdepends"/>
                    <includesfile name="${metainf}/qsarmolecular.libdepends"/>
                    <includesfile name="${metainf}/qsarprotein.libdepends"/>
                    <includesfile name="${metainf}/qsarcml.libdepends"/>
                    <includesfile name="${metainf}/reaction.libdepends"/>
                    <includesfile name="${metainf}/render.libdepends"/>
                    <includesfile name="${metainf}/renderbasic.libdepends"/>
                    <includesfile name="${metainf}/renderawt.libdepends"/>
                    <includesfile name="${metainf}/standard.libdepends"/>
                    <includesfile name="${metainf}/valencycheck.libdepends"/>
                    <includesfile name="${metainf}/sdg.libdepends"/>
                    <includesfile name="${metainf}/forcefield.libdepends"/>
                    <includesfile name="${metainf}/inchi.libdepends"/>
                    <includesfile name="${metainf}/smarts.libdepends"/>
                    <includesfile name="${metainf}/smsd.libdepends"/>
                    <includesfile name="${metainf}/pcore.libdepends"/>
                    <includesfile name="${metainf}/formula.libdepends"/>
                    <includesfile name="${metainf}/isomorphism.libdepends"/>
                    <includesfile name="${metainf}/qm.libdepends"/>
                    <includesfile name="${metainf}/iordf.libdepends"/>
                    <includesfile name="${metainf}/signature.libdepends"/>
                </fileset>
                <fileset dir="${dist}/jar">
                    <include name="cdk-annotation.jar"/>
                    <include name="cdk-ioformats.jar"/>
                    <include name="cdk-atomtype.jar"/>
                    <include name="cdk-builder3d.jar"/>
                    <include name="cdk-builder3dtools.jar"/>
                    <include name="cdk-charges.jar"/>
                    <include name="cdk-core.jar"/>
                    <include name="cdk-cip.jar"/>
                    <include name="cdk-log4j.jar"/>
                    <include name="cdk-dict.jar"/>
                    <include name="cdk-diff.jar"/>
                    <include name="cdk-control.jar"/>
                    <include name="cdk-datadebug.jar"/>
                    <include name="cdk-data.jar"/>
                    <include name="cdk-silent.jar"/>
                    <include name="cdk-extra.jar"/>
                    <include name="cdk-fragment.jar"/>
                    <include name="cdk-interfaces.jar"/>
                    <include name="cdk-io.jar"/>
                    <include name="cdk-libiocml.jar"/>
                    <include name="cdk-libiomd.jar"/>
                    <include name="cdk-pdbcml.jar"/>
                    <include name="cdk-pdb.jar"/>
                    <include name="cdk-qsar.jar"/>
                    <include name="cdk-qsaratomic.jar"/>
                    <include name="cdk-qsarbond.jar"/>
                    <include name="cdk-qsarmolecular.jar"/>
                    <include name="cdk-qsarionpot.jar"/>
                    <include name="cdk-qsarprotein.jar"/>
                    <include name="cdk-qsarcml.jar"/>
                    <include name="cdk-reaction.jar"/>
                    <include name="cdk-render.jar"/>
                    <include name="cdk-renderbasic.jar"/>
                    <include name="cdk-renderawt.jar"/>
                    <include name="cdk-standard.jar"/>
                    <include name="cdk-structgen.jar"/>
                    <include name="cdk-valencycheck.jar"/>
                    <include name="cdk-forcefield.jar"/>
                    <include name="cdk-smiles.jar"/>
                    <include name="cdk-smarts.jar"/>
                    <include name="cdk-fingerprint.jar"/>
                    <include name="cdk-sdg.jar"/>
                    <include name="cdk-inchi.jar"/>
                    <include name="cdk-pcore.jar"/>
                    <include name="cdk-formula.jar"/>
                    <include name="cdk-isomorphism.jar"/>
                    <include name="cdk-ionpot.jar"/>
                    <include name="cdk-smsd.jar"/>
                    <include name="cdk-iordf.jar"/>
                    <include name="cdk-signature.jar"/>
                    <include name="cdk-qm.jar"/>
                    <include name="cdk-tautomer.jar"/>
                </fileset>
            </unjar>

            <!-- then zip up things -->
            <jar jarfile="${dist}/jar/cdk-${version}.jar">
                <manifest>
                    <section name="org.openscience.cdk">
                        <attribute name="Specification-Title" value="The Chemistry Development Kit"/>
                        <attribute name="Specification-Version" value="1.4"/>
                        <attribute name="Specification-Vendor" value="The CDK Project"/>
                        <attribute name="Implementation-Title" value="org.openscience.cdk"/>
                        <attribute name="Implementation-Version" value="${version}"/>
                        <attribute name="Implementation-Vendor" value="The CDK Project"/>
                        <attribute name="X-Compile-Target-JDK" value="${compile.target.version}"/>
                    </section>
                </manifest>
                <fileset dir="${appjars.dir}">
                    <include name="**/*" />
                </fileset>
            </jar>
        </target>

        <target id="dist-pure" name="dist-pure" depends="dist-all"
            description="Builds one big jar file for the CDK, excluding third party libraries.">

            <!-- first unjar the CDK and other jars we need -->
            <mkdir dir="${appjars.dir}"/>
            <unjar dest="${appjars.dir}">
                <fileset dir="${dist}/jar">
                    <include name="cdk-annotation.jar"/>
                    <include name="cdk-builder3d.jar"/>
                    <include name="cdk-builder3dtools.jar"/>
                    <include name="cdk-charges.jar"/>
                    <include name="cdk-log4j.jar"/>
                    <include name="cdk-core.jar"/>
                    <include name="cdk-cip.jar"/>
                    <include name="cdk-control.jar"/>
                    <include name="cdk-datadebug.jar"/>
                    <include name="cdk-data.jar"/>
                    <include name="cdk-silent.jar"/>
                    <include name="cdk-diff.jar"/>
                    <include name="cdk-extra.jar"/>
                    <include name="cdk-fragment.jar"/>
                    <include name="cdk-interfaces.jar"/>
                    <include name="cdk-io.jar"/>
                    <include name="cdk-ioformats.jar"/>
                    <include name="cdk-libiocml.jar"/>
                    <include name="cdk-libiomd.jar"/>
                    <include name="cdk-pdbcml.jar"/>
                    <include name="cdk-pdb.jar"/>
                    <include name="cdk-qsar.jar"/>
                    <include name="cdk-qsaratomic.jar"/>
                    <include name="cdk-qsarbond.jar"/>
                    <include name="cdk-qsarmolecular.jar"/>
                    <include name="cdk-qsarionpot.jar"/>
                    <include name="cdk-qsarprotein.jar"/>
                    <include name="cdk-qsarcml.jar"/>
                    <include name="cdk-reaction.jar"/>
                    <include name="cdk-render.jar"/>
                    <include name="cdk-renderbasic.jar"/>
                    <include name="cdk-renderawt.jar"/>
                    <include name="cdk-standard.jar"/>
                    <include name="cdk-structgen.jar"/>
                    <include name="cdk-valencycheck.jar"/>
                    <include name="cdk-forcefield.jar"/>
                    <include name="cdk-smarts.jar"/>
                    <include name="cdk-fingerprint.jar"/>
                    <include name="cdk-smiles.jar"/>
                    <include name="cdk-sdg.jar"/>
                    <include name="cdk-inchi.jar"/>
                    <include name="cdk-pcore.jar"/>
                    <include name="cdk-formula.jar"/>
		    <include name="cdk-atomtype.jar"/>
                    <include name="cdk-signature.jar"/>
                    <include name="cdk-tautomer.jar"/>
                </fileset>
            </unjar>

            <!-- then zip up things -->
            <jar jarfile="${dist}/jar/cdk-pure-${version}.jar">
                <manifest>
                    <section name="org.openscience.cdk">
                        <attribute name="Specification-Title" value="The Chemistry Development Kit"/>
                        <attribute name="Specification-Version" value="1.0"/>
                        <attribute name="Specification-Vendor" value="The CDK Project"/>
                        <attribute name="Implementation-Title" value="org.openscience.cdk"/>
                        <attribute name="Implementation-Version" value="${version}"/>
                        <attribute name="Implementation-Vendor" value="The CDK Project"/>
                        <attribute name="X-Compile-Target-JDK" value="${compile.target.version}"/>
                    </section>
                </manifest>
                <fileset dir="${appjars.dir}">
                    <include name="**/*" />
                </fileset>
            </jar>
        </target>

        <target id="dist-test-large" name="dist-test-large" depends="test-dist-all, jarTestdata"
            description="Builds on big jar file for the CDK test classes.">

            <!-- first unjar the CDK and other jars we need -->
            <mkdir dir="${appjars.dir}"/>
            <unjar dest="${appjars.dir}">
                <fileset dir="${lib}">
                    <includesfile name="${metainf}/test.libdepends"/>
                    <includesfile name="${metainf}/test-core.libdepends"/>
                    <includesfile name="${metainf}/test-data.libdepends"/>
                    <includesfile name="${metainf}/test-datadebug.libdepends"/>
                    <includesfile name="${metainf}/test-silent.libdepends"/>
                    <includesfile name="${metainf}/test-diff.libdepends"/>
                    <includesfile name="${metainf}/test-extra.libdepends"/>
                    <includesfile name="${metainf}/test-fragment.libdepends"/>
                    <includesfile name="${metainf}/test-builder3d.libdepends"/>
                    <includesfile name="${metainf}/test-forcefield.libdepends"/>
                    <includesfile name="${metainf}/test-inchi.libdepends"/>
                    <includesfile name="${metainf}/test-io.libdepends"/>
                    <includesfile name="${metainf}/test-pdb.libdepends"/>
                    <includesfile name="${metainf}/test-qsaratomic.libdepends"/>
                    <includesfile name="${metainf}/test-qsarbond.libdepends"/>
                    <includesfile name="${metainf}/test-qsarmolecular.libdepends"/>
                    <includesfile name="${metainf}/test-qsarionpot.libdepends"/>
                    <includesfile name="${metainf}/test-qsarprotein.libdepends"/>
                    <includesfile name="${metainf}/test-qsar.libdepends"/>
                    <includesfile name="${metainf}/test-reaction.libdepends"/>
                    <includesfile name="${metainf}/test-smarts.libdepends"/>
                    <includesfile name="${metainf}/test-smiles.libdepends"/>
                    <includesfile name="${metainf}/test-standard.libdepends"/>
                    <includesfile name="${metainf}/test-structgen.libdepends"/>
                    <includesfile name="${metainf}/test-valencycheck.libdepends"/>
                    <includesfile name="${metainf}/test-charges.libdepends"/>
                    <includesfile name="${metainf}/test-libiomd.libdepends"/>
                    <includesfile name="${metainf}/test-pcore.libdepends"/>
                    <includesfile name="${metainf}/test-formula.libdepends"/>
                    <includesfile name="${metainf}/test-render.libdepends"/>
                    <includesfile name="${metainf}/test-log4j.libdepends"/>
                    <includesfile name="${metainf}/test-signature.libdepends"/>
                    <includesfile name="${metainf}/test-cip.libdepends"/>
                </fileset>
                <fileset dir="${dist}/jar">
                    <include name="cdk-test.jar"/>
                    <include name="cdk-testdata.jar"/>
                    <include name="cdk-test-annotation.jar"/>
                    <include name="cdk-test-ioformats.jar"/>
                    <include name="cdk-test-core.jar"/>
                    <include name="cdk-test-data.jar"/>
                    <include name="cdk-test-datadebug.jar"/>
                    <include name="cdk-test-silent.jar"/>
                    <include name="cdk-test-diff.jar"/>
                    <include name="cdk-test-extra.jar"/>
                    <include name="cdk-test-fragment.jar"/>
                    <include name="cdk-test-builder3d.jar"/>
                    <include name="cdk-test-forcefield.jar"/>
                    <include name="cdk-test-inchi.jar"/>
                    <include name="cdk-test-io.jar"/>
                    <include name="cdk-test-pdb.jar"/>
                    <include name="cdk-test-qsaratomic.jar"/>
                    <include name="cdk-test-qsarbond.jar"/>
                    <include name="cdk-test-qsarmolecular.jar"/>
                    <include name="cdk-test-qsarionpot.jar"/>
                    <include name="cdk-test-qsarprotein.jar"/>
                    <include name="cdk-test-qsar.jar"/>
                    <include name="cdk-test-reaction.jar"/>
                    <include name="cdk-test-smarts.jar"/>
                    <include name="cdk-test-smiles.jar"/>
                    <include name="cdk-test-standard.jar"/>
                    <include name="cdk-test-structgen.jar"/>
                    <include name="cdk-test-valencycheck.jar"/>
                    <include name="cdk-test-charges.jar"/>
                    <include name="cdk-test-libiomd.jar"/>
                    <include name="cdk-test-pcore.jar"/>
                    <include name="cdk-test-formula.jar"/>
                    <include name="cdk-test-render.jar"/>
                    <include name="cdk-test-log4j.jar"/>
                    <include name="cdk-test-signature.jar"/>
		    <include name="cdk-test-cip.jar"/>
                    <include name="cdk-test-tautomer.jar"/>
                </fileset>
            </unjar>

            <!-- then zip up things -->
            <jar jarfile="${dist}/jar/cdk-test-${version}.jar">
                <manifest>
                    <attribute name="Main-Class" value="org.openscience.cdk.CDKTests"/>
                    <section name="org.openscience.cdk">
                        <attribute name="Specification-Title" value="The Chemistry Development Kit"/>
                        <attribute name="Specification-Version" value="1.4"/>
                        <attribute name="Specification-Vendor" value="The CDK Project"/>
                        <attribute name="Implementation-Title" value="org.openscience.cdk"/>
                        <attribute name="Implementation-Version" value="${version}"/>
                        <attribute name="Implementation-Vendor" value="The CDK Project"/>
                        <attribute name="X-Compile-Target-JDK" value="${compile.target.version}"/>
                    </section>
                </manifest>
                <fileset dir="${appjars.dir}">
                    <include name="**/*" />
                </fileset>
            </jar>
        </target>

        <target id="sourcedist" name="sourcedist"
                description="Builds the source packages.">
                <property name="package" value="cdk-src+libs-${version}"/>
                <property name="sourcedist.dir" value="${sourcedist}/${package}"/>
                <delete dir="${sourcedist.dir}"/>
                <copy todir="${sourcedist.dir}/${src}/main/">
                        <fileset dir="${src}/main/" includes="**/*.java" />
                        <fileset dir="${src}/main/" includes="**/*.jj" />
                        <fileset dir="${src}/main/" includes="**/*.jjt" />
                        <fileset dir="${src}/main/" includes="org/openscience/cdk/io/cml/data/**" />
                </copy>
                <copy todir="${sourcedist.dir}">
                        <fileset dir="." includes="build.props" />
                        <fileset dir="." includes="build.xml" />
                        <fileset dir="." includes="javadoc.xml" />
                        <fileset dir="." includes="README" />
                        <fileset dir="." includes="changelog*" />
                </copy>
            <copy todir="${sourcedist.dir}/jar">
                    <fileset dir="jar">
                        <exclude name="*.so"/>
                        <exclude name="*.dll"/>
                        <exclude name="jumbo-5.4.2-b2.jar"/>
                    </fileset>
            </copy>
            <copy todir="${sourcedist.dir}/doc/refs">
                    <fileset dir="doc/refs">
                        <include name="*.*"/>
                    </fileset>
            </copy>
            <copy todir="${sourcedist.dir}/develjar">
                    <fileset dir="develjar">
                        <exclude name="pmd-1.8.jar"/>
                        <exclude name="dbdoclet*.*"/>
                    </fileset>
            </copy>
            <copy todir="${sourcedist.dir}/src/META-INF">
                    <fileset dir="src/META-INF" />
            </copy>
                <copy todir="${sourcedist.dir}/${src}/main/">
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/atomtype.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/builder3d.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/core.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/dict.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/extra.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/fingerprint.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/forcefield.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/io.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/log4j.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/pdb.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/qsaratomic.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/qsar.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/qsarmolecular.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/sdg.datafiles" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/" />
                <copy todir="${sourcedist.dir}/doc/">
                    <fileset dir="doc/" includes="lgpl.license" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/javadoc" />
                <!-- the below deteles are a workaround, because the above should not have copied
                     in the src/data and src/org/openscience/cdk/test dirs -->
                <delete dir="${sourcedist.dir}/src/test/data"/>

                <!-- now package things up -->
                <tar tarfile="${package}.tar" basedir="${sourcedist}/" includes="${package}/**" />
                <gzip zipfile="${package}.tar.gz" src="${package}.tar" />
                <delete file="${package}.tar" />
                <zip zipfile="${package}.zip" basedir="${sourcedist}/" includes="${package}/**" />
        </target>

        <target id="puredist" name="puredist" depends="init, runDoclet"
                description="Builds the source packages without third-party libaries.">
                <property name="package" value="cdk-${version}"/>
                <property name="sourcedist.dir" value="${sourcedist}/${package}"/>
                <delete dir="${sourcedist.dir}"/>
                <copy todir="${sourcedist.dir}/${src}/main">
                        <fileset dir="${src}/main/" includes="**/*.java" />
                        <fileset dir="${src}/main/" includes="**/*.jj" />
                        <fileset dir="${src}/main/" includes="**/*.jjt" />
                        <fileset dir="${src}/main/" includes="org/openscience/cdk/io/cml/data/**" />
                </copy>
                <copy todir="${sourcedist.dir}/doc/refs">
                        <fileset dir="doc/refs">
                            <include name="*.*"/>
                        </fileset>
                </copy>
                <copy todir="${sourcedist.dir}">
                        <fileset dir="." includes="build.props" />
                        <fileset dir="." includes="build.xml" />
                        <fileset dir="." includes="javadoc.xml" />
                        <fileset dir="." includes="README" />
                        <fileset dir="." includes="changelog*" />
                </copy>
                <copy todir="${sourcedist.dir}/src/META-INF">
                    <fileset dir="src/META-INF" />
               </copy>
                <copy todir="${sourcedist.dir}/${src}/main/">
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/atomtype.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/builder3d.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/core.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/dict.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/extra.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/fingerprint.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/forcefield.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/io.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/log4j.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/pdb.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/qsaratomic.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/qsar.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/qsarmolecular.datafiles" />
                    <fileset dir="${src}/main/" includesfile="${src}/META-INF/sdg.datafiles" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/" />
                <copy todir="${sourcedist.dir}/doc/">
                    <fileset dir="doc/" includes="lgpl.license" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/javadoc" />
                <!-- the below deteles are a workaround, because the above should not have copied
                     in the src/data and src/org/openscience/cdk/test dirs -->
                <delete dir="${sourcedist.dir}/src/data"/>
                <delete dir="${sourcedist.dir}/src/test"/>

                <!-- now package things up -->
                <tar tarfile="${package}.tar" basedir="${sourcedist}/" includes="${package}/**" />
                <gzip zipfile="${package}.tar.gz" src="${package}.tar" />
                <delete file="${package}.tar" />
        </target>

        <target id="noJunit" name="noJunit" depends="check" unless="junit.present">
            <fail message="JUnit is not installed in Ant. Please run ant with the option '-lib develjar/junit-4.10.jar'."/>
        </target>
        
		<target id="test-module" name="test-module" depends="noJunit"
	                description="Performs a full JUnit test for the CDK." 
	                if="junit.present">

            <echo message="Testing classes for CDK's ${module} module." />

            <!-- check for availability for meta info files -->
            <available file="${metainf}/test-${module}.cdkdepends" property="module.cdkdepends.present"/>
            <available file="${metainf}/test-${module}.libdepends" property="module.libdepends.present"/>
			<available file="${metainf}/test-${module}.devellibdepends" property="module.devellibdepends.present"/>        
			
            <!-- be somewhat informative -->
            <echo message="CDK dependencies defined: ${module.cdkdepends.present}"/>
            <echo message="Library dependencies defined: ${module.libdepends.present}"/>
			<echo message="Developer Library dependencies defined: ${module.devellibdepends.present}"/>

			<mkdir dir="${reports.tests}"/>
            <junit printsummary="yes" haltonfailure="no" fork="yes" maxmemory="256m">
                <classpath>
                     <fileset dir="${lib}" >
                         <exclude name="**/*" unless="module.libdepends.present" />
                         <includesfile name="${metainf}/test-${module}.libdepends" if="module.libdepends.present" />
                     </fileset>
                     <fileset dir="${devellib}">
                         <exclude name="**/*" unless="module.devellibdepends.present" />
                         <includesfile name="${metainf}/test-${module}.devellibdepends" if="module.devellibdepends.present" />
                     </fileset>
                     <fileset dir="${dist}/jar">
                         <exclude name="**/*" unless="module.cdkdepends.present" />
                         <includesfile name="${metainf}/test-${module}.cdkdepends" if="module.cdkdepends.present" />
                         <include name="cdk-test-${module}.jar" />
                     </fileset>
                 </classpath>
              	 <test name="org.openscience.cdk.modulesuites.M${module}Tests"
            	     haltonfailure="no"
            	     todir="${reports.tests}"
            	     outfile="result-${module}">
            	     <formatter type="brief" />
            	 </test>
			</junit>
        </target>
			
        <target id="test-all" name="test-all" depends="noJunit, dist-all, test-dist-all, jarTestdata"
                description="Performs a full JUnit test for the CDK." 
                if="junit.present">
            <foreach target="test-module" param="module" trim="true"
                list="core,data,datadebug,dict,diff,atomtype,standard,
                      io,builder3d,forcefield,valencycheck,charges,reaction,
                      smarts,fingerprint,smiles,qsar,qsaratomic,qsarbond,
                      qsarmolecular,qsarionpot,qsarprotein,pdb,pcore,inchi,
                      structgen,libiomd,libiocml,formula,render,extra,fragment,sdg,
                      ioformats,log4j,smsd,signature,iordf,cip,tautomer,
                      isomorphism,renderbasic,renderawt,silent"/>
        </target>

        <target id="limitations" name="limitations" depends="noJunit, dist-all"
                description="Performs a JUnit tests that indicate limitations of certain CDK algorithms/classes.">
                <junit printsummary="yes" haltonfailure="yes" fork="yes">
                    <classpath>
                        <fileset dir="${dist}/jar">
                                <include name="cdk-*.jar" />
                        </fileset>
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${devellib}">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                        <test name="org.openscience.cdk.limitations.AlgorithmLimitations"
                        haltonfailure="no"
                        todir="${reports.tests}"
                        outfile="limitations">
                                <formatter type="brief" />
                        </test>
                </junit>
        </target>

        <target id="run-test" name="run-test" depends="dist-all,test-dist-all" 
                description="Runs one specific JUnit test suite (org.openscience.cdk.&lt;class>) as a standalone application with 
-Dtestclass=&lt;class>.">
                <echo message="Running test class: testclass=${testclass}"/>
                <java classname="org.openscience.cdk.${testclass}" fork="yes" maxmemory="512m">
                    <jvmarg value="-Dcdk.debugging=true"/>
                    <classpath>
                        <fileset dir="${dist}/jar/">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${devellib}">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                </java>
        </target>

        <target id="junit-test" name="junit-test" depends="dist-all,test-dist-all,noJunit" 
                description="Runs one specific JUnit test suite (org.openscience.cdk.&lt;class>) with -Dtestclass=&lt;class>.">
                <echo message="JUnit tests class: testclass=${testclass}"/>
                <junit printsummary="yes" haltonfailure="no" fork="yes">
                    <jvmarg value="-Dcdk.debugging=true"/>
                    <jvmarg value="-Dcdk.debug.stdout=true"/>
                    <classpath>
                        <fileset dir="${dist}/jar/">
                                <include name="*.jar" />
                        </fileset>
                        <pathelement path="${java.class.path}" />
                        <pathelement location="." />
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${devellib}">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                    <test name="org.openscience.cdk.${testclass}"
                        haltonfailure="no"
                        todir="${reports.tests}"
                        outfile="result.${testclass}">
                        <formatter type="brief" />
                    </test>
                </junit>
        </target>

        <target id="run" name="run" depends="dist-all" 
                description="Runs an application (org.openscience.cdk.&lt;class>) with -Drunclass=&lt;class>.">
                <java classname="org.openscience.cdk.${runclass}" fork="yes" >
                    <!--jvmarg value="-Dcdk.debugging=true"/>
                    <jvmarg value="-Dcdk.debug.stdout=true"/-->
 
		    <arg value="${arg1}" />
                   <arg value="${arg2}" />
                   <arg value="${arg3}" />
                   <arg value="${arg4}" />
                   <classpath>
                        <fileset dir="${dist}/jar">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                </java>
        </target>

    <target name="checkCopyright" id="checkCopyright" depends="check, customize">
        <echo>Checking copyright info...</echo>
        <mkdir dir="${build}" />
        <javac includes="net/sf/cdk/tools/copyright/CheckCopyrightStatements.java"
            srcdir="${src}/main/" destdir="${build}" optimize="${optimization}"
            debug="${debug}" deprecation="${deprecation}"/>
        <java classpath="${build}" classname="net.sf.cdk.tools.copyright.CheckCopyrightStatements">
              <arg value="${src}/META-INF"/>
              <arg value="${src}/main"/>
              <arg value="${build}"/>
        </java>
    </target>

    <target name="javancss" id="javancss" depends="runDoclet">
        <mkdir dir="${build}" />
        <echo>Calculating source statistics...</echo>
	<javancss srcdir="${src}/main" includes="**/*.java"
            generateReport="true"
            outputfile="${build}/cdk_metrics.xml"
            format="plain"
	    classMetrics="false"
	    functionMetrics="false"
	/>
	<javancss srcdir="${src}/test" includes="**/*.java"
            generateReport="true"
            outputfile="${build}/cdktest_metrics.xml"
            format="plain"
	    classMetrics="false"
	    functionMetrics="false"
	/>
    </target>

    <!-- Regenerate template fingerprints in case the fingerprint code has been updated
	 so that fingerprint bits are different from a previous version -->
    <target name="makefp3d" id="makefp3d">
      <antcall target="compile-module"><param name="module" value="builder3dtools"/></antcall>
      <gunzip src="${src}/main/org/openscience/cdk/modeling/builder3d/data/ringTemplateStructures.sdf.gz"
	      dest="${src}/main/org/openscience/cdk/modeling/builder3d/data/" />
      <java classname="org.openscience.cdk.modeling.builder3d.TemplateExtractor">
	<classpath>
	  <pathelement location="jar/jgrapht-0.6.0.jar"/>
          <pathelement location="jar/xercesImpl-2.9.0.jar"/>
          <pathelement location="jar/vecmath1.2-1.14.jar"/>
          <pathelement path="${dist}/jar/cdk-builder3dtools.jar" />
          <pathelement path="${dist}/jar/cdk-interfaces.jar" />
          <pathelement path="${dist}/jar/cdk-standard.jar" />
          <pathelement path="${dist}/jar/cdk-core.jar" />
          <pathelement path="${dist}/jar/cdk-io.jar" />
          <pathelement path="${dist}/jar/cdk-ioformats.jar" />
          <pathelement path="${dist}/jar/cdk-data.jar" />
          <pathelement path="${dist}/jar/cdk-isomorphism.jar" />
          <pathelement path="${dist}/jar/cdk-fingerprint.jar" />
	</classpath>
	<arg value="${src}/main/org/openscience/cdk/modeling/builder3d/data/ringTemplateStructures.sdf" />
	<arg value="${src}/main/org/openscience/cdk/modeling/builder3d/data/ringTemplateFingerprints.txt" />
	<arg value="True" />
	<arg value="True" />
      </java>
      <gzip src="${src}/main/org/openscience/cdk/modeling/builder3d/data/ringTemplateFingerprints.txt"
	    destfile="${src}/main/org/openscience/cdk/modeling/builder3d/data/ringTemplateFingerprints.txt.gz" />
      <delete file="${src}/main/org/openscience/cdk/modeling/builder3d/data/ringTemplateStructures.sdf"/>
      <delete file="${src}/main/org/openscience/cdk/modeling/builder3d/data/ringTemplateFingerprints.txt"/>
    </target>

</project>
